#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('resabike:server');
var http = require('http');
var models = require('../models/index');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '10017');
app.set('port', port);
//app.set('baseUrl', '/grp17');

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/* Sync DB ans start listening*/
models.sequelize.sync().then(function() {
    //{force:true}
    /**
     * Listen on provided port, on all network interfaces.
     */
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);

/* --  Create the three roles and the superadmin login and password. We have to check if it exists in database before, to avoid entries to be created every time (duplicates) --*/

    models.Role.findAll({
    }).then((roles) => {
        if(roles.length == 0){
            models.Role.create({
                roleName: 'Super administrateur'
            }).then(() =>{
                models.Role.create({
                    roleName: ' Zone administrateur'
                })
            }).then(() =>{
                models.Role.create({
                    roleName: ' Chauffeur de bus'
                })
            })
        }

        models.Login.findOne({
            where: {
                username: 'sysadmin'
            }
        }).then((login) => {
            if(login == null){
                models.Login.create({
                    username: 'sysadmin',
                    password: 'password',
                    id_role: 1
                })
            }
        })
    });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
